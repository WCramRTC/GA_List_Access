# GA_List_Access

## Explanation

A list is an object that is used to hold multiple objects of the same type, like an array. A list has easy to use functionality that allows you to easily add, remove, and insert items into it. 

The key functionality is

**Creating A List**
```csharp
	List<type> listName = new List<type>();

	Example:
	List<string> names = new List<string>();
```

**Adding to the list**
```csharp
	listName.Add(item); // This adds the item to the end of our list
```

**Accessing a value**
```csharp
	listName[index]; // Just like an array, we use square brackets and an index to access the value of a single element
```

**Removing an item**
```csharp
	listName.Remove(item); // Removes the first instance of a specific item that matches the argument

	listName.RemoveAt(index); // Removes the item at the specific index
```

**Inserting an Item**
```csharp
	name.Insert(index, item); // This inserts an item at a specific index
```

**Count of Elements**
```csharp
	int index = listName.Count; // listName.Count will return the number of items inserted into the list. So if there are 5 names, the count will be 5.
```

---

## Quick Assignment

1. Add a label to display the counts of elements in a list
2. Add a editor that is read only to display information
3. Add a label that says "Enter a name"
4. Add a entry for a user to input information
5. Add a label that says "Enter Index"
6. Add an entry that will take an index the user passes in 
7. Add a button that says Add Information that, when pressed, will add the information to a global list in our c#. The information will now update on the editor.
8. Add a button that will take the users name input and index input and UPDATES the information ( changes or reassigns the value )
9. Add a button that will take the users name input and index input and adds the name to the list at that location.
10. Add a button that clears the list



---

## Full Code

`Xaml Code`
```xml
<ScrollView>
        <!-- Vertical layout to stack elements vertically -->
        <VerticalStackLayout
            Spacing="15"
            Padding="15">

            <!-- Label to display the count of elements in the list -->
            <Label
                x:Name="labelCount"
                Text="Count: 0" />

            <!-- Editor to display information, set as read-only -->
            <Editor
                x:Name="editorInfo"
                IsReadOnly="True"
                HeightRequest="100" />

            <!-- Label indicating where to enter a name -->
            <Label
                Text="Enter a name" />

            <!-- Entry field for user to input a name -->
            <Entry
                x:Name="entryName"
                Placeholder="Name" />

            <!-- Label indicating where to enter an index -->
            <Label
                Text="Enter Index" />

            <!-- Entry field for user to input an index, numeric keyboard for ease of input -->
            <Entry
                x:Name="entryIndex"
                Placeholder="Index"
                Keyboard="Numeric" />

            <!-- Buttons for various actions, each with an event handler -->
            <Button
                x:Name="buttonAdd"
                Text="Add Information"
                Clicked="buttonAdd_Clicked"
                 />
            <Button
                x:Name="buttonUpdate"
                Text="Update Information"
                Clicked="buttonUpdate_Clicked"
                 />
            <Button
                x:Name="buttonInsert"
                Text="Insert at Index"
                Clicked="buttonInsert_Clicked"
                 />
            <Button
                x:Name="buttonRemove"
                Text="Remove at Index"
                Clicked="buttonRemove_Clicked"
                 />
            <Button
                x:Name="buttonClear"
                Text="Clear List"
                Clicked="buttonClear_Clicked"
                 />     

        </VerticalStackLayout>
    </ScrollView>
```

`C# Code`
```csharp
   // Declare a global variable list to hold a list of strings, names
        List<string> names = new List<string>();

        public MainPage()
        {
            InitializeComponent();

            // Add names to the list
            names.Add("Desmond");
            names.Add("Manjula");
            names.Add("Kristyn");
            names.Add("Josh");
            names.Add("Will");

            // Call the UpdateInfoEditor() to update the display with names
            UpdateInfoEditor();
            // Call UpdateCountLabel() to update the count of elements on the top label
            UpdateCountLabel();
        }

        private void UpdateInfoEditor()
        {
            editorInfo.Text = ""; // Clear the current text
            foreach (var name in names)
            {
                editorInfo.Text += name + Environment.NewLine; // Append each name with a newline
            }
        }

        private void UpdateCountLabel()
        {
            // Refresh the labelCount with the current numbers of elements in the list
            labelCount.Text = $"Count: {names.Count}";
        }

        private void buttonAdd_Clicked(object sender, EventArgs e)
        {
            names.Add(entryName.Text); // Add the entered name to the list
            UpdateInfoEditor(); // Update the editor to display the new list
            UpdateCountLabel(); // Update the count label
        }

        private void buttonUpdate_Clicked(object sender, EventArgs e)
        {
            if (int.TryParse(entryIndex.Text, out int index) && index >= 0 && index < names.Count)
            {
                names[index] = entryName.Text; // Update the name at the specified index
                UpdateInfoEditor(); // Update the editor to display the new list
            }
        }

        private void buttonInsert_Clicked(object sender, EventArgs e)
        {
            if (int.TryParse(entryIndex.Text, out int index) && index >= 0 && index <= names.Count)
            {
                names.Insert(index, entryName.Text); // Insert the name at the specified index
                UpdateInfoEditor(); // Update the editor to display the new list
                UpdateCountLabel(); // Update the count label
            }
        }

        private void buttonRemove_Clicked(object sender, EventArgs e)
        {
            if (int.TryParse(entryIndex.Text, out int index) && index >= 0 && index < names.Count)
            {
                names.RemoveAt(index); // Remove the name at the specified index
                UpdateInfoEditor(); // Update the editor to display the new list
                UpdateCountLabel(); // Update the count label
            }
        }

        private void buttonClear_Clicked(object sender, EventArgs e)
        {
            names.Clear();
            UpdateInfoEditor();
            UpdateCountLabel();
        }
```